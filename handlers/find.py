from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import re

from .start import Mode, track_keyboard, default_keyboard
from prodcr import find_cheaper_products

find_router = Router()

valid_names = ("ozon.ru", "wildberries.ru")

class Find(StatesGroup):
    cost_range = State()
    exact_match = State()


def get_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="find"),
            InlineKeyboardButton(text="üîç–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞", callback_data="exact_match")
        ],
        [
            InlineKeyboardButton(text="üí∞–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", callback_data="cost_range")
        ]
    ])



def is_valid_url(text: str) -> bool:
    url_pattern = re.compile(
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    )
    finded_string = url_pattern.search(text)
    if not bool(finded_string):
        return False
    
    return any(name in text for name in valid_names)

def is_valid_range(text: str) -> bool:
    try:
        borders = text.split()
        return len(borders) == 2 and int(borders[0]) <= int(borders[1])
    except (ValueError, IndexError):
        return False


async def get_url(text: str) -> str:
    url_pattern = re.compile(
        r'(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)'
    )
    url = url_pattern.search(text).group(0)
    return url


async def get_market(url: str) -> str:
    if "wildberries" in url:
        return "Wildberries"
    elif "ozon" in url:
        return "Ozon"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–π—Ç"


async def get_text(exact_match: bool = False, cost_range: str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") -> str:
    if cost_range == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω":
        range_text = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else:
        borders = cost_range.split()
        range_text = f"{borders[0]} - {borders[1]}"
    return (
        "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
        f"–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {'‚úÖ–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ' if exact_match else '‚ùå–ù–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫'}\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {range_text}\n\n"
        "–ñ–µ–ª–∞–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞?"
    )
    

@find_router.message(F.text.func(is_valid_url), Mode.find_mode)
async def process_url(message: Message, state: FSMContext):
    url = await get_url(message.text)
    await state.clear()
    await state.set_data({
        'exact_match': False,
        'cost_range': "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        'url': url
    })
    
    await message.answer(await get_text(), reply_markup=get_keyboard())


@find_router.message(F.text == "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã", Mode.find_mode)
async def process_change_mode(message: Message, state: FSMContext):
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.", reply_markup=track_keyboard)
    await state.set_state(Mode.track_mode)



@find_router.message(Mode.find_mode)
async def process_text(message: Message, state: FSMContext):
    await message.answer(f'–ù–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ.\n\n'
                         f'–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏ –¥–µ—à–µ–≤–ª–µ‚ú®\n\n'
                         f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã:\n'
                         f'{"\n".join(valid_names)}')


@find_router.callback_query(F.data == "cost_range")
async def set_cost_range(callback: Message, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    if data.get('url') is None:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 5000):")
    await state.set_state(Find.cost_range)
    

@find_router.message(F.text, Find.cost_range)
async def process_cost_range(message: Message, state: FSMContext):
    if not re.match(r"^\d+ \d+$", message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        return
    if not is_valid_range(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è")
        return
    await state.update_data(cost_range=message.text)
    data = await state.get_data()
    await message.answer(await get_text(data.get('exact_match'), data.get('cost_range')), reply_markup=get_keyboard())


@find_router.callback_query(F.data == "exact_match")
async def set_exact_match(callback: Message, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    if not data.get('url'):
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
        return
    buttons = [
        [KeyboardButton(text="‚úÖ–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"), KeyboardButton(text="‚ùå–ù–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫")]
    ]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.set_state(Find.exact_match)


@find_router.message(Find.exact_match)
async def process_exact_match(message: Message, state: FSMContext):
    text = message.text
    if text == "‚úÖ–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ":
        await state.update_data(exact_match=True)
    elif text == "‚ùå–ù–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫":
        await state.update_data(exact_match=False)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return
    data = await state.get_data()
    await message.answer("–¢–æ—á–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await message.answer(await get_text(data['exact_match'], data['cost_range']), reply_markup=get_keyboard())

@find_router.callback_query(F.data == "find")
async def get_finding_params(callback: Message, state: FSMContext):
    data = await state.get_data()
    url = data.get('url')
    
    if not url:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
        return
    await callback.message.delete()
    wait_msg = await callback.message.answer("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    
    result = await find_cheaper_products(url, data.get('cost_range'), data.get('exact_match'))
    
    await wait_msg.delete()
    
    if isinstance(result, str):
        await callback.message.answer(result)
    else:
        for link, price in result.items():
            market = await get_market(link)
            await callback.message.answer(
                f"–¶–µ–Ω–∞: {price}\n–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {market}\n{link}"
            ,)
    await state.clear()
    await callback.answer(reply_markup=default_keyboard)
    
